name: Claude Code Integration (PAT Version)

# トリガーイベントの設定
on:
  # プルリクエストのコメントでトリガー
  issue_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review_comment:
    types: [created]
  # プルリクエストのレビュー時にトリガー
  pull_request_review:
    types: [submitted]
  # プルリクエストの作成・更新時にトリガー
  pull_request:
    types: [opened, synchronize]
    # 特定のファイルパスが変更された場合のみ実行（オプション）
    paths:
      - "src/**/*.js"
      - "src/**/*.ts"
      - "tests/**/*.js"
      - "tests/**/*.ts"

# ジョブ定義
jobs:
  # 1. コードレビュー・アシスタントジョブ
  claude-assistant:
    # コメントに@claudeが含まれる場合のみ実行
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude'))
    runs-on: ubuntu-latest
    permissions:
      contents: read  # 読み取り権限のみ（PATで認証するため）
      pull-requests: read
      issues: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得（ブランチ作成に必要）
          token: ${{ secrets.PAT_TOKEN }}  # PATを使用
      
      # Git 設定を事前に行う（PATで認証）
      - name: Configure Git with PAT
        run: |
          git config --global user.name "Claude Bot"
          git config --global user.email "claude-bot@users.noreply.github.com"
          git config --global init.defaultBranch main
          # マージコンフリクト時の戦略を設定
          git config --global merge.ours.driver true
          git config --global pull.rebase false
          
          # PAT認証設定
          git config --global url."https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"
          
          echo "Git グローバル設定を完了しました"
          git config --list | grep user || true
      
      - name: Run Claude Code Action
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.PAT_TOKEN }}  # PATを使用
          trigger_phrase: "@claude"
          timeout_minutes: "60"
          # 使用可能なツールを制限
          allowed_tools: |
            Bash(npm install)
            Bash(npm run build)
            Bash(npm run test)
            Bash(npm run lint)

      # より堅牢なクリーンアップとプルリクエスト作成（PAT版）
      - name: Smart Cleanup and Create Pull Request (PAT Version)
        if: success()
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}  # GitHub CLI用のPAT
        run: |
          set -e  # エラー時に即座に停止
          
          # GitHub CLI は環境変数 GH_TOKEN を自動的に使用するため、明示的なログインは不要
          
          # Git ユーザー設定
          git config user.name "Claude Bot"
          git config user.email "claude-bot@users.noreply.github.com"
          echo "Git ユーザー設定を完了しました"
          
          # リモートURLをPAT認証に変更
          git remote set-url origin "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git"
          
          # GitHub CLI の動作確認
          if ! gh auth status; then
            echo "GitHub CLI認証に問題があります"
            echo "環境変数GH_TOKENを確認します"
            if [[ -n "$GH_TOKEN" ]]; then
              echo "GH_TOKEN は設定されています"
            else
              echo "❌ GH_TOKEN が設定されていません"
              exit 1
            fi
          fi
          
          # 現在のブランチ名を取得
          CURRENT_BRANCH=$(git branch --show-current)
          BASE_BRANCH="${{ github.event.repository.default_branch }}"
          echo "現在のブランチ: $CURRENT_BRANCH"
          echo "デフォルトブランチ: $BASE_BRANCH"
          
          # メインブランチの場合は処理を終了
          if [[ "$CURRENT_BRANCH" == "$BASE_BRANCH" ]] || [[ "$CURRENT_BRANCH" == "main" ]] || [[ "$CURRENT_BRANCH" == "master" ]]; then
            echo "メインブランチにいるため、プルリクエストの作成をスキップします"
            echo "メインブランチでの処理を正常終了します"
            exit 0
          fi
          
          echo "=== 一時ファイルのクリーンアップ ==="
          # Claude の出力ファイルや一時ファイルを削除
          find . -name "output.txt" -delete 2>/dev/null || true
          find . -name "*.log" -delete 2>/dev/null || true
          find . -name ".claude-*" -delete 2>/dev/null || true
          find . -name "claude-session-*" -delete 2>/dev/null || true
          
          # node_modules や他の一時ディレクトリを除外
          rm -rf node_modules .next dist build coverage 2>/dev/null || true
          
          echo "一時ファイルをクリーンアップしました"
          
          # 変更があるファイルを確認
          echo "=== 変更状況の確認 ==="
          git status --porcelain
          
          # 変更があるかチェック
          if [[ -n $(git status --porcelain) ]]; then
            echo "作業ディレクトリに変更が検出されました"
            
            # 一時ファイルを除外して変更をステージング
            git add .
            git reset -- output.txt *.log .claude-* claude-session-* 2>/dev/null || true
            
            # ステージングされた変更があるかチェック
            if [[ -n $(git diff --cached --name-only) ]]; then
              echo "有効な変更がステージングされました"
              
              # リモートの最新状態を取得（スマートな競合回避）
              echo "=== リモート状態の同期 ==="
              git fetch origin "$CURRENT_BRANCH" || {
                echo "リモートブランチが存在しないか、取得に失敗しました"
                git push -u origin "$CURRENT_BRANCH" 2>/dev/null || true
              }
              
              # リモートと同期する前に、現在の状態をstash
              STASH_RESULT=$(git stash push -m "Claude changes before sync" 2>&1 || echo "No changes to stash")
              echo "Stash結果: $STASH_RESULT"
              
              # リモートからの変更を安全にマージ
              if git show-ref --verify --quiet "refs/remotes/origin/$CURRENT_BRANCH"; then
                echo "リモートブランチが存在します。同期を試行します..."
                
                # Force pullではなく、安全なマージを試行
                if git merge "origin/$CURRENT_BRANCH" --no-edit --strategy-option=ours 2>/dev/null; then
                  echo "✅ リモートとのマージが成功しました"
                elif git merge "origin/$CURRENT_BRANCH" --no-edit --strategy-option=theirs 2>/dev/null; then
                  echo "✅ リモートの変更を優先してマージしました"
                else
                  echo "⚠️ 自動マージに失敗。リセットして続行します"
                  git merge --abort 2>/dev/null || true
                  git reset --hard "origin/$CURRENT_BRANCH" 2>/dev/null || true
                fi
              fi
              
              # Stashした変更を復元
              if [[ "$STASH_RESULT" != *"No changes to stash"* ]]; then
                if git stash pop 2>/dev/null; then
                  echo "✅ Stashした変更を復元しました"
                else
                  echo "⚠️ Stash復元でコンフリクトが発生。手動解決を試行..."
                  # 簡単な競合解決: 自分の変更を優先
                  git checkout --ours . 2>/dev/null || true
                  git add . 2>/dev/null || true
                fi
              fi
              
              # 最終的な変更があるかチェック
              if [[ -n $(git status --porcelain) ]]; then
                # 新規コミットを作成
                git add .
                git commit -m "🤖 Claude クリーンアップ: 一時ファイルを除外

                元のIssue: ${{ github.event.issue.title || 'Auto-generated' }}
                実行時刻: $(date '+%Y-%m-%d %H:%M:%S UTC')
                
                Co-authored-by: Claude <claude@anthropic.com>" || {
                  echo "コミットが既に存在するか、変更がありません"
                }
                
                echo "変更をコミットしました"
              fi
              
              # プッシュを複数回試行（PAT認証）
              PUSH_SUCCESS=false
              for attempt in {1..3}; do
                echo "プッシュ試行 $attempt/3... (PAT認証)"
                if git push origin "$CURRENT_BRANCH" --force-with-lease; then
                  echo "✅ プッシュ成功 (試行 $attempt)"
                  PUSH_SUCCESS=true
                  break
                else
                  echo "❌ プッシュ失敗 (試行 $attempt)"
                  if [[ $attempt -lt 3 ]]; then
                    echo "再同期して再試行..."
                    git fetch origin "$CURRENT_BRANCH" || true
                    git merge "origin/$CURRENT_BRANCH" --no-edit --strategy-option=ours 2>/dev/null || true
                    sleep 2
                  fi
                fi
              done
              
              if [[ "$PUSH_SUCCESS" != true ]]; then
                echo "❌ 3回の試行でプッシュに失敗しました"
                echo "デバッグ情報:"
                git status
                git remote -v
                exit 1
              fi
            fi
          fi
          
          # ベースブランチとの差分を確認
          DIFF_COUNT=$(git rev-list --count "$BASE_BRANCH..$CURRENT_BRANCH" 2>/dev/null || echo "0")
          echo "最終的な差分コミット数: $DIFF_COUNT"
          
          # プルリクエストを作成（差分がある場合のみ）
          if [[ "$DIFF_COUNT" -gt 0 ]]; then
            echo "=== プルリクエストの確認・作成 ==="
            
            # 既存のプルリクエストをチェック
            EXISTING_PR=$(gh pr list --head "$CURRENT_BRANCH" --json number --jq '.[0].number // empty' 2>/dev/null || echo "")
            
            if [[ -n "$EXISTING_PR" ]]; then
              echo "既存のプルリクエスト (#$EXISTING_PR) が見つかりました"
              gh pr edit "$EXISTING_PR" --body "## 🤖 Claude からの提案 (更新済み)

              この PR は Claude Code Action によって自動生成・更新されました。

              ### 📋 変更内容
              - ${{ github.event.issue.title || 'プロジェクトファイルの更新' }}
              - 一時ファイル（output.txt, *.log）は除外済み
              - 自動マージコンフリクト解決済み

              ### ✅ 確認事項
              - [ ] コードレビューを実施
              - [ ] テストの実行を確認
              - [ ] 動作確認を実施

              ### 🔗 関連情報
              - 元の Issue: ${{ github.event.issue.html_url || 'N/A' }}
              - 実行ワークフロー: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ---
              *最終更新: $(date '+%Y-%m-%d %H:%M:%S UTC')*"
              echo "✅ 既存のプルリクエストを更新しました"
            else
              echo "新しいプルリクエストを作成します"
              PR_RESULT=$(gh pr create \
                --title "🤖 Claude Code Suggestion - ${{ github.event.issue.title || github.event.comment.body || 'Auto-generated' }}" \
                --body "## 🤖 Claude からの提案

              この PR は Claude Code Action によって自動生成されました。

              ### 📋 変更内容
              - ${{ github.event.issue.title || 'プロジェクトファイルの更新' }}
              - 一時ファイル（output.txt, *.log）は除外済み
              - 自動マージコンフリクト解決機能付き

              ### ✅ 確認事項
              - [ ] コードレビューを実施
              - [ ] テストの実行を確認
              - [ ] 動作確認を実施

              ### 🔗 関連情報
              - 元の Issue: ${{ github.event.issue.html_url || 'N/A' }}
              - 実行ワークフロー: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ---
              *このPRは自動生成されました。内容を確認してからマージしてください。*" \
                --label "claude-generated,needs-review" \
                --assignee "${{ github.actor }}" \
                --base "$BASE_BRANCH" \
                --head "$CURRENT_BRANCH" 2>&1)
              
              if [[ $? -eq 0 ]]; then
                echo "✅ プルリクエストが正常に作成されました"
                echo "$PR_RESULT"
              else
                echo "❌ プルリクエストの作成に失敗しました:"
                echo "$PR_RESULT"
              fi
            fi
          else
            echo "⚠️ ベースブランチとの差分がありません。プルリクエストの作成をスキップします。"
          fi
